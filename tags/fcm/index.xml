<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FCM on B-log</title><link>https://blog.wxh.me/tags/fcm/</link><description>Recent content in FCM on B-log</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>cissoid</copyright><lastBuildDate>Thu, 10 Jan 2019 16:05:34 +0800</lastBuildDate><atom:link href="https://blog.wxh.me/tags/fcm/index.xml" rel="self" type="application/rss+xml"/><item><title>FCM Go SDK 代码结构解析</title><link>https://blog.wxh.me/post/2019/01/fcm-go-sdk/</link><pubDate>Thu, 10 Jan 2019 16:05:34 +0800</pubDate><guid>https://blog.wxh.me/post/2019/01/fcm-go-sdk/</guid><description>&lt;p>最近工作中有接入 FCM 推送的需求, 因此对 Firebase SDK 的 FCM 相关代码做了一番调研.&lt;/p>
&lt;p>首先, 来一段官方 demo:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">firebase&lt;/span> &lt;span style="color:#e6db74">&amp;#34;firebase.google.com/go&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;firebase.google.com/go/messaging&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;google.golang.org/api/option&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">opt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">option&lt;/span>.&lt;span style="color:#a6e22e">WithCredentialsFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;service-account.json&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">app&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">firebase&lt;/span>.&lt;span style="color:#a6e22e">NewApp&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">opt&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#75715e">// Obtain a messaging.Client from the App.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>()
&lt;span style="color:#a6e22e">client&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">Messaging&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#75715e">// This registration token comes from the client FCM SDKs.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">registrationToken&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YOUR_REGISTRATION_TOKEN&amp;#34;&lt;/span>
&lt;span style="color:#75715e">// See documentation on defining a message payload.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">messaging&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>{
&lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;850&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2:45&amp;#34;&lt;/span>,
},
&lt;span style="color:#a6e22e">Token&lt;/span>: &lt;span style="color:#a6e22e">registrationToken&lt;/span>,
}
&lt;span style="color:#75715e">// Send a message to the device corresponding to the provided
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// registration token.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#75715e">// Response is a message ID string.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Successfully sent message:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">response&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="证书解析">证书解析&lt;/h1>
&lt;p>首先, 来看这一行代码&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#a6e22e">opt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">option&lt;/span>.&lt;span style="color:#a6e22e">WithCredentialsFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;service-account.json&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回的 &lt;code>opt&lt;/code> 是一个 interface, 定义如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ClientOption&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Apply&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">DialSettings&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 interface 只有一个 Apply 方法, 接受一个 DialSettings 结构体的指针.
DialSettings 的定义如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">DialSettings&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Endpoint&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Scopes&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">TokenSource&lt;/span> &lt;span style="color:#a6e22e">oauth2&lt;/span>.&lt;span style="color:#a6e22e">TokenSource&lt;/span>
&lt;span style="color:#a6e22e">Credentials&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">google&lt;/span>.&lt;span style="color:#a6e22e">DefaultCredentials&lt;/span>
&lt;span style="color:#a6e22e">CredentialsFile&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// if set, Token Source is ignored.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">CredentialsJSON&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;span style="color:#a6e22e">UserAgent&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">APIKey&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">HTTPClient&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>
&lt;span style="color:#a6e22e">GRPCDialOpts&lt;/span> []&lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">DialOption&lt;/span>
&lt;span style="color:#a6e22e">GRPCConn&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">ClientConn&lt;/span>
&lt;span style="color:#a6e22e">NoAuth&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 package option 中对每一个字段都有一个对应的函数, 如 &lt;code>option.WithEndpoint()&lt;/code>,
&lt;code>option.WithScopes()&lt;/code> 等等, 这些函数都返回一个 ClientOption, 而调用 &lt;code>ClientOption.Apply()&lt;/code>
方法的效果就是修改 DialSettings 中对应字段的值. 这样做的好处是, 可以使用多个
ClientOption 来修改一个 DialSettings 的不同字段.&lt;/p>
&lt;p>因此, 如果调用上面的 &lt;code>opt.Apply()&lt;/code> 方法, 会修改 &lt;code>DialSettings.CredentialsFile&lt;/code> 字段.&lt;/p>
&lt;h1 id="创建-app">创建 app&lt;/h1>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#a6e22e">app&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">firebase&lt;/span>.&lt;span style="color:#a6e22e">NewApp&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">opt&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>NewApp&lt;/code> 内部做了许多操作, 但对于使用 FCM 有用的, 只有两处:&lt;/p>
&lt;ol>
&lt;li>解析 json 证书文件, 得到 project_id.&lt;/li>
&lt;li>除了第一步证书解析的 opt 外, 另增加一个修改 Scopes 的 &lt;code>ClientOption&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h1 id="创建-messaging-client">创建 Messaging client&lt;/h1>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#a6e22e">client&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">Messaging&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>())
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>app.Messaging()&lt;/code> 方法中可以看到实际上 FCM 推送的 client 只使用了 app 的 projectID
和 opts 两个字段:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">App&lt;/span>) &lt;span style="color:#a6e22e">Messaging&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">messaging&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#a6e22e">conf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">MessagingConfig&lt;/span>{
&lt;span style="color:#a6e22e">ProjectID&lt;/span>: &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">projectID&lt;/span>,
&lt;span style="color:#a6e22e">Opts&lt;/span>: &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">opts&lt;/span>,
&lt;span style="color:#a6e22e">Version&lt;/span>: &lt;span style="color:#a6e22e">Version&lt;/span>,
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">messaging&lt;/span>.&lt;span style="color:#a6e22e">NewClient&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">conf&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而在 &lt;code>messaging.NewClient()&lt;/code> 函数中, 最重要的是调用 &lt;code>transport.NewHTTPClient()&lt;/code>
这一步, 在这个函数里完成了 FCM 推送最关键的获取 access_token 以及发送请求时增加
&lt;code>Authorizion&lt;/code> 的处理:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewClient&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">MessagingConfig&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ProjectID&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;project ID is required to access Firebase Cloud Messaging client&amp;#34;&lt;/span>)
}
&lt;span style="color:#a6e22e">hc&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">transport&lt;/span>.&lt;span style="color:#a6e22e">NewHTTPClient&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Opts&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>{
&lt;span style="color:#a6e22e">fcmEndpoint&lt;/span>: &lt;span style="color:#a6e22e">messagingEndpoint&lt;/span>,
&lt;span style="color:#a6e22e">iidEndpoint&lt;/span>: &lt;span style="color:#a6e22e">iidEndpoint&lt;/span>,
&lt;span style="color:#a6e22e">client&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">HTTPClient&lt;/span>{&lt;span style="color:#a6e22e">Client&lt;/span>: &lt;span style="color:#a6e22e">hc&lt;/span>},
&lt;span style="color:#a6e22e">project&lt;/span>: &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ProjectID&lt;/span>,
&lt;span style="color:#a6e22e">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Go/Admin/&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Version&lt;/span>,
}, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于 &lt;code>transport.NewHTTPClient()&lt;/code> 中有多层嵌套, 这里只捡重要的来看. 首先,
经过多个函数调用后, 走到 &lt;code>google.golang.org/api/transport/http&lt;/code> package 的
&lt;code>newTransport()&lt;/code> 函数这里:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">newTransport&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">base&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">RoundTripper&lt;/span>, &lt;span style="color:#a6e22e">settings&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">DialSettings&lt;/span>) (&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">RoundTripper&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#a6e22e">trans&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">base&lt;/span>
&lt;span style="color:#a6e22e">trans&lt;/span> = &lt;span style="color:#a6e22e">userAgentTransport&lt;/span>{
&lt;span style="color:#a6e22e">base&lt;/span>: &lt;span style="color:#a6e22e">trans&lt;/span>,
&lt;span style="color:#a6e22e">userAgent&lt;/span>: &lt;span style="color:#a6e22e">settings&lt;/span>.&lt;span style="color:#a6e22e">UserAgent&lt;/span>,
}
&lt;span style="color:#a6e22e">trans&lt;/span> = &lt;span style="color:#a6e22e">addOCTransport&lt;/span>(&lt;span style="color:#a6e22e">trans&lt;/span>)
&lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">settings&lt;/span>.&lt;span style="color:#a6e22e">NoAuth&lt;/span>:
&lt;span style="color:#75715e">// Do nothing.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">settings&lt;/span>.&lt;span style="color:#a6e22e">APIKey&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>:
&lt;span style="color:#a6e22e">trans&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">transport&lt;/span>.&lt;span style="color:#a6e22e">APIKey&lt;/span>{
&lt;span style="color:#a6e22e">Transport&lt;/span>: &lt;span style="color:#a6e22e">trans&lt;/span>,
&lt;span style="color:#a6e22e">Key&lt;/span>: &lt;span style="color:#a6e22e">settings&lt;/span>.&lt;span style="color:#a6e22e">APIKey&lt;/span>,
}
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#a6e22e">creds&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">Creds&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">settings&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#a6e22e">trans&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">oauth2&lt;/span>.&lt;span style="color:#a6e22e">Transport&lt;/span>{
&lt;span style="color:#a6e22e">Base&lt;/span>: &lt;span style="color:#a6e22e">trans&lt;/span>,
&lt;span style="color:#a6e22e">Source&lt;/span>: &lt;span style="color:#a6e22e">creds&lt;/span>.&lt;span style="color:#a6e22e">TokenSource&lt;/span>,
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">trans&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于使用的是 FCM 的 HTTP v1 接口, 因此这个 switch 判断会走到 default 这个 label.
这里做了两件事:&lt;/p>
&lt;ol>
&lt;li>使用 DialSettings 再次初始化了一个证书实例, 用于管理 access_token.&lt;/li>
&lt;li>创建了一个 oauth2 的 transport, 用于请求时附加 &lt;code>Authorization&lt;/code> 头.&lt;/li>
&lt;/ol>
&lt;h2 id="管理-access_token">管理 access_token&lt;/h2>
&lt;p>&lt;code>internal.Creds()&lt;/code> 方法经过一系列调用, 执行到 &lt;code>golang.org/x/oauth2/google&lt;/code> package
的如下方法:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">credentialsFile&lt;/span>) &lt;span style="color:#a6e22e">tokenSource&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">scopes&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">oauth2&lt;/span>.&lt;span style="color:#a6e22e">TokenSource&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">serviceAccountKey&lt;/span>:
&lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">jwtConfig&lt;/span>(&lt;span style="color:#a6e22e">scopes&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">TokenSource&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>), &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">userCredentialsKey&lt;/span>:
&lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">oauth2&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;span style="color:#a6e22e">ClientID&lt;/span>: &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">ClientID&lt;/span>,
&lt;span style="color:#a6e22e">ClientSecret&lt;/span>: &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">ClientSecret&lt;/span>,
&lt;span style="color:#a6e22e">Scopes&lt;/span>: &lt;span style="color:#a6e22e">scopes&lt;/span>,
&lt;span style="color:#a6e22e">Endpoint&lt;/span>: &lt;span style="color:#a6e22e">Endpoint&lt;/span>,
}
&lt;span style="color:#a6e22e">tok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">oauth2&lt;/span>.&lt;span style="color:#a6e22e">Token&lt;/span>{&lt;span style="color:#a6e22e">RefreshToken&lt;/span>: &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">RefreshToken&lt;/span>}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">TokenSource&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">tok&lt;/span>), &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;missing &amp;#39;type&amp;#39; field in credentials&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unknown credential type: %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于 &lt;code>credentialsFile.Type&lt;/code> 的值为 &lt;code>service_account&lt;/code> (查看 json 证书文件可以证明),
因此会走到这里:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Config&lt;/span>) &lt;span style="color:#a6e22e">TokenSource&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">oauth2&lt;/span>.&lt;span style="color:#a6e22e">TokenSource&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">oauth2&lt;/span>.&lt;span style="color:#a6e22e">ReuseTokenSource&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">jwtSource&lt;/span>{&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>})
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>oauth2.ReuseTokenSource()&lt;/code> 函数略去不表, 它的作用就是当 access_token 过期时重新生成一个.
而真正获取 access_token 是在 &lt;code>jwtSource.Token()&lt;/code> 方法中处理. 代码太多就不贴了,
可以看 &lt;a href="https://github.com/golang/oauth2/blob/master/jwt/jwt.go">这里&lt;/a>.&lt;/p>
&lt;h2 id="请求时的处理">请求时的处理&lt;/h2>
&lt;p>上一步生成的 &lt;code>TokenSource&lt;/code> 被传给了 &lt;code>oauth2.Transport&lt;/code>. 在 &lt;code>Transport.RoundTrip()&lt;/code> 方法中,
就会调用 &lt;code>TokenSource.Token()&lt;/code> 方法来获取 access_token 了.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Transport&lt;/span>) &lt;span style="color:#a6e22e">RoundTrip&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#75715e">// 省略部分代码
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Source&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;oauth2: Transport&amp;#39;s Source is nil&amp;#34;&lt;/span>)
}
&lt;span style="color:#a6e22e">token&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Source&lt;/span>.&lt;span style="color:#a6e22e">Token&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#a6e22e">req2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cloneRequest&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>) &lt;span style="color:#75715e">// per RoundTripper contract
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">token&lt;/span>.&lt;span style="color:#a6e22e">SetAuthHeader&lt;/span>(&lt;span style="color:#a6e22e">req2&lt;/span>)
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">setModReq&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">req2&lt;/span>)
&lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">base&lt;/span>().&lt;span style="color:#a6e22e">RoundTrip&lt;/span>(&lt;span style="color:#a6e22e">req2&lt;/span>)
&lt;span style="color:#75715e">// 省略部分代码
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="发送请求">发送请求&lt;/h1>
&lt;p>无非就是 json 序列化, 然后使用上面的 transport 对 HTTP 请求进行处理并发送罢了.&lt;/p>
&lt;h1 id="问题">问题&lt;/h1>
&lt;p>在 &lt;a href="https://firebase.google.com/docs/cloud-messaging/migrate-v1">Firebase 文档&lt;/a> 中,
有说到在获取 access_token 时需要
&lt;code>https://www.googleapis.com/auth/firebase.messaging&lt;/code> 这个 scope,
但我在代码中似乎并没有找到相关处理?&lt;/p></description></item></channel></rss>